Server:
  port: 8080
RestApi:
  kakao:
    host: "https://dapi.kakao.com/"
    path: "/v2/search/blog"
    key: "KakaoAK e6cf760ee93f406c3e67cce178ae9960"
#spring:
#  h2:
#    console:
#      enabled: true							# h2 콘솔 사용
#      path: /h2-console									# localhost:port/h2 로 접근 가능
#      settings:
#        trace: false						# Print additional trace information
#        web-allow-others: true	# 브라우저로 접근가능하게 하기
#  profiles:
#    active: local
#  # H2 메모리 DB를 위한 설정
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1 # userdb 스키마에 mem인 메모리 데이터 베이스로 동작
#    username: sa
#    password:
#    sql-script-encoding: utf-8
  # H2 메모리 DB를 위한 설정
spring:
  h2:
    console:
      enabled: true  # H2 Console을 사용할지 여부 (H2 Console은 H2 Database를 UI로 제공해주는 기능)
      path: /h2-console  # H2 Console의 Path
      web-allow-others: true
  profiles:
      active: local
  # DB 연결
  datasource:
    # 설치된 H2 DB와 연결 URL
    url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
    #url: jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1
    # 접속을 위한 드라이버
    driver-class-name: org.h2.Driver
    # springboot 2.4 부터는 username이 꼭 있어야합니다. 없으면 에러가 발생합니다.
    username: sa
    password:
  jpa:
    # JPA가 수행하는 SQL을 볼 수 있다.
    show-sql: true
    # 객체를 보고 자동으로 테이블 생성 여부. 생성 - create, 비생성 - none
    # 테스트이기 때문에 create로 설정하며
    # 실제로는 none 으로 합니다. create이면 기존의 테이블을 전부 밀어버립니다.
    hibernate:
      ddl-auto: create
  # 콘솔 확인 을 위한 always
  output:
    ansi:
      enabled: always
# 파라미터 확인을 위한 trace
logging:
  level:
    org.hibernate.type: trace

